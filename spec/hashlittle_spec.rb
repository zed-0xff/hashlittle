# frozen_string_literal: true

TESTDATA = [
  0xdeadbfee, 0x45a067cd, 0xebdf978c, 0x356fe3b7, 0xa617e8f8, 0x54b7f59f, 0xbfbc01bf, 0xb5886171,
  0xcbcbc3d3, 0x5aa12b67, 0xad743677, 0x796baf63, 0x45896689, 0xc9f9c0fe, 0x5b5bd867, 0x93f5aca6,
  0xaf711632, 0x0abc75b9, 0xd883c3bc, 0xb9d1c391, 0x79b6e336, 0x21fe0d49, 0xb4d01645, 0x8b9ff6a8,
  0xc7edb73d, 0xabe978d3, 0xa52a047b, 0xac44d8f8, 0x5b14cb6d, 0x7dab6f69, 0x4026c0ae, 0xf7785220,
  0x47b5f809, 0x895c2847, 0x23cb305d, 0xc27bca99, 0xcb01e3e0, 0x7caf7669, 0x574f9629, 0xc71e8671,
  0x9795d33d, 0x3bcffeff, 0x59d69d4b, 0xa6138a4b, 0x60afff00, 0xf5801218, 0x2b376aef, 0xa6995a9e,
  0x7929fcc2, 0xceb7ee5b, 0x995dd446, 0x44f6f7ad, 0x20fa09bb, 0xb047ecde, 0x64467471, 0x3c952846,
  0xcd8875a6, 0xfc3aeb8a, 0x61a4843e, 0x0f348ce8, 0x5612e5dc, 0x0bef7bd7, 0x2c913cd1, 0x156a869e,
  0x32c07ef4, 0xf6875a0f, 0xd893a4d2, 0xc5436d32, 0x28412bea, 0xe622cae4, 0xce395e9c, 0x1a0f07ca,
  0x9fd1270a, 0x2c2cd4b5, 0x3e51c05b, 0xcfd04ff4, 0x19761873, 0xe00003f8, 0xea595623, 0xb84e0c64,
  0x833ae7f4, 0x66995862, 0x2b7beb34, 0x5778dc75, 0x035585f5, 0xa64d7a1e, 0xf7c98cc4, 0x9c53c118,
  0xec2a166f, 0x35adb109, 0x49a85e76, 0x41d3196f, 0x3f5a7ef0, 0xadce5a9a, 0x3d199fd7, 0x834d7494,
  0x594eeebd, 0x191f59bc, 0x93cf4727, 0x36f31220, 0x6aacade7, 0xd6af8da5, 0x4b108c2e, 0x547a5f17,
  0x44c8567c, 0xb6bf7b40, 0xa5b25502, 0x7fed38e0, 0x39e51995, 0xe9205aa9, 0x0240257a, 0x71be4035,
  0x61baae4f, 0x2edd6ff3, 0x4524b701, 0x839ee2ba, 0x9a779c18, 0x790f112d, 0x4352febb, 0x63312126,
  0x920ed1d3, 0x9aeaf943, 0x0caf3a15, 0x3d238918, 0x883a2e1c, 0x712199f8, 0xd4aa0367, 0x264b39d2,
  0x2e34af12, 0x942b6b32, 0x21d74ae9, 0x4bb8e108, 0x40435886, 0xe7721c88, 0x6bb67ed5, 0x574d208b,
  0xc06cb310, 0x62f38139, 0x8b3e46e2, 0x86acccb7, 0x6997ff27, 0x00acfd6c, 0xcf99c706, 0x7a8adc1d,
  0xcfbdd5ad, 0x101d3ba6, 0x9d085661, 0xa7184420, 0x46787e58, 0xbd2e9826, 0xa749a88c, 0xaa91b92f,
  0xf618c446, 0xbec5f1ef, 0x03d04f7f, 0x96ece672, 0x83863d39, 0x9e2b4a86, 0x0681cfc6, 0x7036128f,
  0xb93f2877, 0x1b6eba42, 0x078cd1cc, 0xbf8842ad, 0x14d17f88, 0x7479a6f7, 0xc44dda32, 0x7a059695,
  0x23856219, 0xf8349744, 0x87027546, 0xaecec8dd, 0xc0a18695, 0x9bfc7bf5, 0x40c4c28c, 0xd75d270a,
  0xbc833396, 0x98e60e3c, 0xa14d6a3a, 0x1699fd72, 0xe404562c, 0x2bea42c4, 0x5359b756, 0x202c5f3a,
  0xd61f691e, 0x12be9f15, 0x733af36b, 0x5fedba17, 0x9238c846, 0xe610fbd8, 0x95c5f014, 0x99814d53,
  0x9681494d, 0x63465cd4, 0xaefea2b8, 0xc65d3931, 0x3d60e408, 0x898da2c4, 0xd5b0a11f, 0x470c9bcd,
  0x5ca1d9b5, 0x45b01fed, 0x317c26e9, 0x3ad572a4, 0x08767668, 0x1ae82ea3, 0xbaf23982, 0x0e3d40d1,
  0xa87ec529, 0x83b743c5, 0xe5cd88fb, 0x80a6f9af, 0xf6347fe1, 0xef89b361, 0xb7dc2eb1, 0x9185c926,
  0xd5fae4f8, 0x2ae4951a, 0xe99d618c, 0xe1879348, 0xa96760b0, 0xc919d561, 0x345de6a8, 0xe0579828,
  0xad412af5, 0xdeb81e89, 0xa10ad33d, 0x80bbb9f5, 0x8adbc623, 0xa8166daa, 0x179ae25a, 0xdc42dbab,
  0x44a41d70, 0xdb0e4d73, 0x9d237178, 0x38a93a70, 0xbec48560, 0x1491baec, 0x55365b37, 0x4cff8d11,
  0xff3a0bc5, 0xc31b3a07, 0xeaef76d3, 0x2530965c, 0xf594ce20, 0x9a417eb3, 0xe577be90, 0xf1b038b9,
  0xfa11b3b5, 0xe9e4ba70, 0x316beb88, 0x53795eb9, 0x05f24b11, 0xb87b74d9, 0x64b21cea, 0x7aec5e78,
].freeze

RSpec.describe Hashlittle do
  describe ".hashlittle" do
    it "fails to hash an int" do
      expect { described_class.hashlittle2(42) }.to raise_error(TypeError)
    end

    it "has default seed of 0" do
      expect(described_class.hashlittle("test")).to eq(described_class.hashlittle("test", 0))
    end

    it "respects seed argument" do
      expect(described_class.hashlittle("test", 42)).not_to eq(described_class.hashlittle("test", 0))
    end

    0x100.times do |i|
      it "hashes TESTDATA[#{i}]" do
        s = i.times.map(&:chr).join
        expect(described_class.hashlittle(s, 255 - i)).to eq(TESTDATA[i])
      end
    end
  end
end
